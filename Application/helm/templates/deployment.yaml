kind: Deployment
apiVersion: apps/v1
metadata:
# set your lab user name
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
# set your lab user name
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
# set your lab user name
        app: {{ .Chart.Name }}
    spec:
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: hello-world
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }} # this check the application url path
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }} # the time is waiting befor testing the application path
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }} # the time for timeout
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }} # the abount of time to wait between checks
            successThreshold: {{ .Values.probes.readiness.successThreshold }} # count to decalre seccessfull 
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }} # count to decalre failure
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.containers.containerPort }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          env:
          - name: PORT
            value: {{ .Values.containers.containerPort | quote }}
# Update with the image you build in part 1
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
          volumeMounts:
            - name: index-html
              mountPath: {{ .Values.volume.mount.path }} # this will mount the html.index file to it application location
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: index-html
          configMap:
            name: '{{ .Chart.Name }}-html'
            defaultMode: 420
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10